plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'

    id 'com.bmuschko.docker-remote-api' version '7.2.0'
    id 'com.bmuschko.docker-java-application' version '6.7.0'
}

def grpcVersion = '1.60.1'
def protobufVersion = '3.24.0'
def protocVersion = protobufVersion

group = "pl.edu.mimuw.mapreduce"

allprojects {
    plugins.withType(JavaPlugin).tap {
        configureEach {
            repositories {
                maven { // The google mirror is less flaky than mavenCentral()
                    url "https://maven-central.storage-download.googleapis.com/maven2/"
                }
                mavenCentral()
                mavenLocal()
            }

            java {
                toolchain {
                    languageVersion = JavaLanguageVersion.of(17)
                }
                sourceCompatibility = JavaVersion.VERSION_17
                targetCompatibility = JavaVersion.VERSION_17
            }

            dependencies {
                testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
                testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
                implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
                implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'

                implementation "io.grpc:grpc-protobuf:${grpcVersion}"
                implementation "io.grpc:grpc-services:${grpcVersion}"
                implementation "io.grpc:grpc-stub:${grpcVersion}"
                compileOnly "org.apache.tomcat:annotations-api:6.0.53"

                // examples/advanced need this for JsonFormat
                implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

                runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

                testImplementation "io.grpc:grpc-testing:${grpcVersion}"
                testImplementation "junit:junit:4.13.2"
                testImplementation "org.mockito:mockito-core:3.4.0"
            }

            protobuf {
                protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
                plugins {
                    grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
                }
                generateProtoTasks {
                    all()*.plugins { grpc {} }
                }
            }

            // Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
            sourceSets {
                main {
                    java {
                        srcDirs 'build/generated/source/proto/main/grpc'
                        srcDirs 'build/generated/source/proto/main/java'
                    }
                }
            }
        }
    }
}

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'com.bmuschko.docker-java-application'

    plugins.withType(JavaPlugin).tap {
        configureEach {
            dependencies {
                implementation project(':')
            }

            docker {
                registryCredentials {
                    url = 'us-central1-docker.pkg.dev'
                }
                javaApplication {
                    baseImage = 'openjdk:17'
                    maintainer = 'Adam Greloch "a.greloch@student.uw.edu.pl"'
                    jvmArgs = ['-Xms256m', '-Xmx2048m']
                }
            }
        }
    }
}

tasks.register('dockerBuildImages') {
    description 'Build Docker images for all subprojects'
    dependsOn ':mains:master:dockerBuildImage'
    dependsOn ':mains:taskmanager:dockerBuildImage'
    dependsOn ':mains:worker:dockerBuildImage'
}

tasks.register('dockerPushImages') {
    description 'Push Docker images to AR for all subprojects'
    dependsOn ':mains:master:dockerPushImage'
    dependsOn ':mains:taskmanager:dockerPushImage'
    dependsOn ':mains:worker:dockerPushImage'
}

test {
    useJUnitPlatform()
}
